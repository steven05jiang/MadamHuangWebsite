"use strict";
var core_1 = require('@angular/core');
var Observable_1 = require('rxjs/Observable');
require('rxjs/add/observable/fromEvent');
require('rxjs/add/operator/debounceTime');
var image_lazy_load_service_1 = require('../services/image-lazy-load.service');
var ImageLazyLoadItemDirective = (function () {
    function ImageLazyLoadItemDirective(el, renderer, lazyLoader) {
        this.el = el;
        this.renderer = renderer;
        this.lazyLoader = lazyLoader;
        this.loading = false;
        this.loaded = false;
        this.error = false;
        this.tagName = el.nativeElement.tagName;
    }
    /*
    * @returns return position/dimension info as an Object `{top, left, bottom}`.
    */
    ImageLazyLoadItemDirective.prototype.getPosition = function () {
        var box = this.el.nativeElement.getBoundingClientRect();
        var top = box.top + (window.pageYOffset - document.documentElement.clientTop);
        return {
            top: top,
            left: box.left + (window.pageXOffset - document.documentElement.clientLeft),
            bottom: top + this.el.nativeElement.clientHeight
        };
    };
    /*
    * @returns container target to place `loading`/`loaded` classes onto.
    */
    ImageLazyLoadItemDirective.prototype.getLoadingContainer = function () {
        if (this.imageLazyLoadingContainer) {
            // find parent node with specified selector
            var collectionHas = function (a, b) {
                for (var i in a) {
                    if (a[i] === b)
                        return true;
                }
                return false;
            };
            var all = document.querySelectorAll(this.imageLazyLoadingContainer);
            var cur = this.el.nativeElement.parentNode;
            while (cur && !collectionHas(all, cur)) {
                cur = cur.parentNode;
            }
            if (cur) {
                return cur;
            }
            else {
                // fallback to direct parentNode if not found
                return this.el.nativeElement.parentNode;
            }
        }
        else {
            // default is direct parentNode for IMG and the node itself for background-image
            if (this.tagName === 'IMG') {
                return this.el.nativeElement.parentNode;
            }
            else {
                return this.el.nativeElement;
            }
        }
    };
    ImageLazyLoadItemDirective.prototype.hasClassName = function (name) {
        return new RegExp('(?:^|\\s+)' + name + '(?:\\s+|$)').test(this.getLoadingContainer().className);
    };
    ImageLazyLoadItemDirective.prototype.addClassName = function (name) {
        if (!this.hasClassName(name)) {
            var container = this.getLoadingContainer();
            container.className = container.className ? [container.className, name].join(' ') : name;
        }
    };
    ImageLazyLoadItemDirective.prototype.removeClassName = function (name) {
        if (this.hasClassName(name)) {
            var container = this.getLoadingContainer();
            var c = container.className;
            container.className = c.replace(new RegExp('(?:^|\\s+)' + name + '(?:\\s+|$)', 'g'), '');
        }
    };
    ImageLazyLoadItemDirective.prototype.toggleLoaded = function (enable) {
        this.loaded = enable;
        if (enable) {
            this.removeClassName(this.lazyLoader.config.loadingClass);
            this.addClassName(this.lazyLoader.config.loadedClass);
        }
        else {
            this.removeClassName(this.lazyLoader.config.loadedClass);
        }
    };
    /*
    * starts loading the image in the background.
    */
    ImageLazyLoadItemDirective.prototype.loadImage = function () {
        var _this = this;
        if (!this.loaded && !this.loading) {
            this.loading = true;
            this.addClassName(this.lazyLoader.config.loadingClass);
            var customHeaders = this.lazyLoader.config.headers ? this.lazyLoader.config.headers : null;
            this.lazyLoader.load(this.imageLazyLoadItem, customHeaders).then(function () {
                _this.setImage();
            }, function (err) {
                _this.error = true;
                _this.loading = false;
                _this.removeClassName(_this.lazyLoader.config.loadingClass);
                _this.addClassName(_this.lazyLoader.config.errorClass);
            });
        }
    };
    /*
    * sets the image to `imageLazyLoadItem`.
    */
    ImageLazyLoadItemDirective.prototype.setImage = function () {
        if (!this.loaded) {
            if (this.tagName === 'IMG') {
                this.renderer.setElementAttribute(this.el.nativeElement, 'src', this.imageLazyLoadItem);
            }
            else {
                this.renderer.setElementAttribute(this.el.nativeElement, 'style', "background-image:url('" + this.imageLazyLoadItem + "')");
            }
            this.loading = false;
            this.toggleLoaded(true);
        }
    };
    __decorate([
        core_1.Input('imageLazyLoadItem'), 
        __metadata('design:type', String)
    ], ImageLazyLoadItemDirective.prototype, "imageLazyLoadItem", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], ImageLazyLoadItemDirective.prototype, "imageLazyLoadingContainer", void 0);
    ImageLazyLoadItemDirective = __decorate([
        core_1.Directive({
            selector: '[imageLazyLoadItem]'
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer, image_lazy_load_service_1.ImageLazyLoaderService])
    ], ImageLazyLoadItemDirective);
    return ImageLazyLoadItemDirective;
}());
exports.ImageLazyLoadItemDirective = ImageLazyLoadItemDirective;
var ImageLazyLoadAreaDirective = (function () {
    function ImageLazyLoadAreaDirective(lazyLoader) {
        this.lazyLoader = lazyLoader;
    }
    ImageLazyLoadAreaDirective.prototype.loadInView = function (list) {
        this.itemsToLoad = (list || this.itemsToLoad).filter(function (item) { return !item.loaded && !item.loading; });
        for (var _i = 0, _a = this.itemsToLoad; _i < _a.length; _i++) {
            var item = _a[_i];
            var ePos = item.getPosition();
            if (ePos.bottom > 0 && (ePos.bottom >= (window.pageYOffset - this.threshold)) && (ePos.top <= ((window.pageYOffset + window.innerHeight) + this.threshold))) {
                item.loadImage();
            }
        }
        if (this.itemsToLoad.length === 0 && this._sub) {
            // subscription is no longer needed
            this._sub.unsubscribe();
            this._sub = undefined;
        }
    };
    ImageLazyLoadAreaDirective.prototype.scrollSubscribe = function () {
        var _this = this;
        var scrollStream = Observable_1.Observable.fromEvent(window, 'scroll').debounceTime(250);
        this._sub = scrollStream.subscribe(function () {
            _this.loadInView();
        });
    };
    ImageLazyLoadAreaDirective.prototype.init = function () {
        var _this = this;
        var subScroll = function () {
            if (!_this._sub) {
                _this.scrollSubscribe();
            }
        };
        // load the initial children in view
        if (this.items.length) {
            // using setTimeout to ensure styles have applied before triggering load
            setTimeout(function () {
                _this.loadInView(_this.items.toArray());
            });
        }
        // listen to scroll event
        subScroll();
        // fired with subsequent changes
        // ideally this would fire on subscribe but it doesn't
        // therefore the above ensures it's handled on ngAfterContentInit
        this.items.changes.subscribe(function (list) {
            _this.loadInView(list.toArray());
            // since scroll subscription is unsuscribed when all items have loaded
            // ensure it is re-subscribed when changes occur
            subScroll();
        });
    };
    ImageLazyLoadAreaDirective.prototype.ngOnInit = function () {
        this.threshold = +this.threshold || 100;
        if (typeof (this.imageLazyLoadConfig) === 'object') {
            this.lazyLoader.config = this.imageLazyLoadConfig;
        }
    };
    ImageLazyLoadAreaDirective.prototype.ngAfterContentInit = function () {
        this.init();
    };
    __decorate([
        core_1.Input('imageLazyLoadArea'), 
        __metadata('design:type', Number)
    ], ImageLazyLoadAreaDirective.prototype, "threshold", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], ImageLazyLoadAreaDirective.prototype, "imageLazyLoadConfig", void 0);
    __decorate([
        core_1.ContentChildren(ImageLazyLoadItemDirective), 
        __metadata('design:type', core_1.QueryList)
    ], ImageLazyLoadAreaDirective.prototype, "items", void 0);
    ImageLazyLoadAreaDirective = __decorate([
        core_1.Directive({
            selector: '[imageLazyLoadArea]'
        }), 
        __metadata('design:paramtypes', [image_lazy_load_service_1.ImageLazyLoaderService])
    ], ImageLazyLoadAreaDirective);
    return ImageLazyLoadAreaDirective;
}());
exports.ImageLazyLoadAreaDirective = ImageLazyLoadAreaDirective;
exports.IMAGELAZYLOAD_DIRECTIVES = [ImageLazyLoadAreaDirective, ImageLazyLoadItemDirective];
//# sourceMappingURL=image-lazy-load.directive.js.map