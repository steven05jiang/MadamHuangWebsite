"use strict";
var core_1 = require('@angular/core');
var http_1 = require('@angular/http');
var web_worker_service_1 = require('./web-worker.service');
var ImageLazyLoaderService = (function () {
    function ImageLazyLoaderService(http, worker) {
        this.http = http;
        this.worker = worker;
        this.imageCache = {};
        // default config
        this._config = {
            loadingClass: 'loading',
            loadedClass: 'loaded',
            errorClass: 'error'
        };
    }
    /*
    * Loads the url via `WebWorker` where supported and gracefully degrades to using `Http` if needed.
    * @param url  url of image to load.
    * @param headers  **(optional)** any custom headers (as an `Object`) that may be required to load the image.
    * @returns return `Promise`
    */
    ImageLazyLoaderService.prototype.load = function (url, headers) {
        if (this.imageCache[url]) {
            // image has been previously loaded, rely on browser cache
            return Promise.resolve(true);
        }
        else if (web_worker_service_1.WebWorkerService.supported && web_worker_service_1.WebWorkerService.enabled) {
            return this.loadViaWorker(url, headers);
        }
        else {
            return this.loadViaHttp(url, headers);
        }
    };
    /*
    * Loads the url via `WebWorker` directly.
    * @param url  url of image to load.
    * @param headers  **(optional)** any custom headers (as an `Object`) that may be required to load the image.
    * @returns return `Promise`
    */
    ImageLazyLoaderService.prototype.loadViaWorker = function (url, headers) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var id, completeHandler, msgFn, errorFn;
            completeHandler = function (success, err) {
                _this.worker.terminate(id);
                if (success) {
                    _this.imageCache[url] = true;
                    resolve(true);
                }
                else {
                    reject(err);
                }
            };
            msgFn = function (e) {
                if (e && e.data !== 'ERROR') {
                    completeHandler(true);
                }
                else {
                    completeHandler(false, e);
                }
            };
            errorFn = function (e) {
                completeHandler(false, e);
            };
            var config = {
                method: 'GET',
                url: url
            };
            // optionally set headers
            if (headers) {
                config.headers = headers;
            }
            id = _this.worker.load(config, msgFn, errorFn);
        });
    };
    /*
    * Loads the url via `Http` directly.
    * @param url  url of image to load.
    * @param headers  **(optional)** any custom headers (as an `Object`) that may be required to load the image.
    * @returns return `Promise`
    */
    ImageLazyLoaderService.prototype.loadViaHttp = function (url, headers) {
        var _this = this;
        var ro = null;
        if (headers) {
            ro = new http_1.RequestOptions({
                headers: new http_1.Headers(headers)
            });
        }
        return new Promise(function (resolve, reject) {
            _this.http.get(url, ro)
                .subscribe(function (res) {
                _this.imageCache[url] = true;
                resolve(true);
            });
        });
    };
    Object.defineProperty(ImageLazyLoaderService.prototype, "config", {
        get: function () {
            return this._config;
        },
        /**
         * Custom config
         **/
        set: function (value) {
            if (value) {
                if (value.headers)
                    this._config.headers = value.headers;
                if (value.loadingClass)
                    this._config.loadingClass = value.loadingClass;
                if (value.loadedClass)
                    this._config.loadedClass = value.loadedClass;
                if (value.errorClass)
                    this._config.errorClass = value.errorClass;
            }
        },
        enumerable: true,
        configurable: true
    });
    ImageLazyLoaderService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http, web_worker_service_1.WebWorkerService])
    ], ImageLazyLoaderService);
    return ImageLazyLoaderService;
}());
exports.ImageLazyLoaderService = ImageLazyLoaderService;
//# sourceMappingURL=image-lazy-load.service.js.map