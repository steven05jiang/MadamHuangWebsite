System.registerDynamic('src/app/directives/image-lazy-load.directive', ['@angular/core', 'rxjs/Observable', 'rxjs/add/observable/fromEvent', 'rxjs/add/operator/debounceTime', '../services/image-lazy-load.service'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var Observable_1 = $__require('rxjs/Observable');
    $__require('rxjs/add/observable/fromEvent');
    $__require('rxjs/add/operator/debounceTime');
    var image_lazy_load_service_1 = $__require('../services/image-lazy-load.service');
    var ImageLazyLoadItemDirective = function () {
        function ImageLazyLoadItemDirective(el, renderer, lazyLoader) {
            this.el = el;
            this.renderer = renderer;
            this.lazyLoader = lazyLoader;
            this.loading = false;
            this.loaded = false;
            this.error = false;
            this.loadingClass = 'loading';
            this.loadedClass = 'loaded';
            this.errorClass = 'error';
            this.tagName = el.nativeElement.tagName;
            if (typeof this.imageLazyLoadConfig === 'object') {
                this.loadingClass = this.imageLazyLoadConfig.loadingClass || this.loadingClass;
                this.loadedClass = this.imageLazyLoadConfig.loadedClass || this.loadedClass;
                this.errorClass = this.imageLazyLoadConfig.errorClass || this.errorClass;
            }
        }
        /*
        * @returns return position/dimension info as an Object `{top, left, bottom}`.
        */
        ImageLazyLoadItemDirective.prototype.getPosition = function () {
            var box = this.el.nativeElement.getBoundingClientRect();
            var top = box.top + (window.pageYOffset - document.documentElement.clientTop);
            return {
                top: top,
                left: box.left + (window.pageXOffset - document.documentElement.clientLeft),
                bottom: top + this.el.nativeElement.clientHeight
            };
        };
        /*
        * @returns container target to place `loading`/`loaded` classes onto.
        */
        ImageLazyLoadItemDirective.prototype.getLoadingContainer = function () {
            if (this.imageLazyLoadingContainer) {
                // find parent node with specified selector
                var collectionHas = function (a, b) {
                    for (var i in a) {
                        if (a[i] === b) return true;
                    }
                    return false;
                };
                var all = document.querySelectorAll(this.imageLazyLoadingContainer);
                var cur = this.el.nativeElement.parentNode;
                while (cur && !collectionHas(all, cur)) {
                    cur = cur.parentNode;
                }
                if (cur) {
                    return cur;
                } else {
                    // fallback to direct parentNode if not found
                    return this.el.nativeElement.parentNode;
                }
            } else {
                // default is direct parentNode for IMG and the node itself for background-image
                if (this.tagName === 'IMG') {
                    return this.el.nativeElement.parentNode;
                } else {
                    return this.el.nativeElement;
                }
            }
        };
        ImageLazyLoadItemDirective.prototype.hasClassName = function (name) {
            return new RegExp('(?:^|\\s+)' + name + '(?:\\s+|$)').test(this.getLoadingContainer().className);
        };
        ImageLazyLoadItemDirective.prototype.addClassName = function (name) {
            if (!this.hasClassName(name)) {
                var container = this.getLoadingContainer();
                container.className = container.className ? [container.className, name].join(' ') : name;
            }
        };
        ImageLazyLoadItemDirective.prototype.removeClassName = function (name) {
            if (this.hasClassName(name)) {
                var container = this.getLoadingContainer();
                var c = container.className;
                container.className = c.replace(new RegExp('(?:^|\\s+)' + name + '(?:\\s+|$)', 'g'), '');
            }
        };
        ImageLazyLoadItemDirective.prototype.toggleLoaded = function (enable) {
            this.loaded = enable;
            if (enable) {
                this.removeClassName(this.loadingClass);
                this.addClassName(this.loadedClass);
            } else {
                this.removeClassName(this.loadedClass);
            }
        };
        /*
        * starts loading the image in the background.
        */
        ImageLazyLoadItemDirective.prototype.loadImage = function () {
            var _this = this;
            if (!this.loaded && !this.loading) {
                this.loading = true;
                this.addClassName(this.loadingClass);
                var customHeaders = this.imageLazyLoadConfig ? this.imageLazyLoadConfig.headers : null;
                this.lazyLoader.load(this.imageLazyLoadItem, customHeaders).then(function () {
                    _this.setImage();
                }, function (err) {
                    _this.error = true;
                    _this.loading = false;
                    _this.removeClassName(_this.loadingClass);
                    _this.addClassName(_this.errorClass);
                });
            }
        };
        /*
        * sets the image to `imageLazyLoadItem`.
        */
        ImageLazyLoadItemDirective.prototype.setImage = function () {
            if (!this.loaded) {
                if (this.tagName === 'IMG') {
                    this.renderer.setElementAttribute(this.el.nativeElement, 'src', this.imageLazyLoadItem);
                } else {
                    this.renderer.setElementAttribute(this.el.nativeElement, 'style', "background-image:url('" + this.imageLazyLoadItem + "')");
                }
                this.loading = false;
                this.toggleLoaded(true);
            }
        };
        __decorate([core_1.Input('imageLazyLoadItem'), __metadata('design:type', String)], ImageLazyLoadItemDirective.prototype, "imageLazyLoadItem", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], ImageLazyLoadItemDirective.prototype, "imageLazyLoadingContainer", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], ImageLazyLoadItemDirective.prototype, "imageLazyLoadConfig", void 0);
        ImageLazyLoadItemDirective = __decorate([core_1.Directive({
            selector: '[imageLazyLoadItem]'
        }), __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer, image_lazy_load_service_1.ImageLazyLoaderService])], ImageLazyLoadItemDirective);
        return ImageLazyLoadItemDirective;
    }();
    exports.ImageLazyLoadItemDirective = ImageLazyLoadItemDirective;
    var ImageLazyLoadAreaDirective = function () {
        function ImageLazyLoadAreaDirective() {}
        ImageLazyLoadAreaDirective.prototype.loadInView = function (list) {
            this.itemsToLoad = (list || this.itemsToLoad).filter(function (item) {
                return !item.loaded && !item.loading;
            });
            for (var _i = 0, _a = this.itemsToLoad; _i < _a.length; _i++) {
                var item = _a[_i];
                var ePos = item.getPosition();
                if (ePos.bottom > 0 && ePos.bottom >= window.pageYOffset - this.threshold && ePos.top <= window.pageYOffset + window.innerHeight + this.threshold) {
                    item.loadImage();
                }
            }
            if (this.itemsToLoad.length === 0 && this._sub) {
                // subscription is no longer needed
                this._sub.unsubscribe();
                this._sub = undefined;
            }
        };
        ImageLazyLoadAreaDirective.prototype.scrollSubscribe = function () {
            var _this = this;
            var scrollStream = Observable_1.Observable.fromEvent(window, 'scroll').debounceTime(250);
            this._sub = scrollStream.subscribe(function () {
                _this.loadInView();
            });
        };
        ImageLazyLoadAreaDirective.prototype.init = function () {
            var _this = this;
            var subScroll = function () {
                if (!_this._sub) {
                    _this.scrollSubscribe();
                }
            };
            // load the initial children in view
            if (this.items.length) {
                // using setTimeout to ensure styles have applied before triggering load
                setTimeout(function () {
                    _this.loadInView(_this.items.toArray());
                });
            }
            // listen to scroll event
            subScroll();
            // fired with subsequent changes
            // ideally this would fire on subscribe but it doesn't
            // therefore the above ensures it's handled on ngAfterContentInit
            this.items.changes.subscribe(function (list) {
                console.log('item changes...');
                _this.loadInView(list.toArray());
                // since scroll subscription is unsuscribed when all items have loaded
                // ensure it is re-subscribed when changes occur
                subScroll();
            });
        };
        ImageLazyLoadAreaDirective.prototype.ngOnInit = function () {
            this.threshold = +this.threshold || 100;
        };
        ImageLazyLoadAreaDirective.prototype.ngAfterContentInit = function () {
            this.init();
        };
        __decorate([core_1.Input('imageLazyLoadArea'), __metadata('design:type', Number)], ImageLazyLoadAreaDirective.prototype, "threshold", void 0);
        __decorate([core_1.ContentChildren(ImageLazyLoadItemDirective), __metadata('design:type', core_1.QueryList)], ImageLazyLoadAreaDirective.prototype, "items", void 0);
        ImageLazyLoadAreaDirective = __decorate([core_1.Directive({
            selector: '[imageLazyLoadArea]'
        }), __metadata('design:paramtypes', [])], ImageLazyLoadAreaDirective);
        return ImageLazyLoadAreaDirective;
    }();
    exports.ImageLazyLoadAreaDirective = ImageLazyLoadAreaDirective;
    exports.IMAGELAZYLOAD_DIRECTIVES = [ImageLazyLoadAreaDirective, ImageLazyLoadItemDirective];
    

    return module.exports;
});
System.registerDynamic('src/app/services/image-lazy-load.service', ['@angular/core', '@angular/http', './web-worker.service'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var http_1 = $__require('@angular/http');
    var web_worker_service_1 = $__require('./web-worker.service');
    var ImageLazyLoaderService = function () {
        function ImageLazyLoaderService(http, worker) {
            this.http = http;
            this.worker = worker;
            this.imageCache = {};
        }
        /*
        * Loads the url via `WebWorker` where supported and gracefully degrades to using `Http` if needed.
        * @param url  url of image to load.
        * @param headers  **(optional)** any custom headers (as an `Object`) that may be required to load the image.
        * @returns return `Promise`
        */
        ImageLazyLoaderService.prototype.load = function (url, headers) {
            if (this.imageCache[url]) {
                // image has been previously loaded, rely on browser cache
                return Promise.resolve(true);
            } else if (web_worker_service_1.WebWorkerService.supported) {
                return this.loadViaWorker(url, headers);
            } else {
                return this.loadViaHttp(url, headers);
            }
        };
        /*
        * Loads the url via `WebWorker` directly.
        * @param url  url of image to load.
        * @param headers  **(optional)** any custom headers (as an `Object`) that may be required to load the image.
        * @returns return `Promise`
        */
        ImageLazyLoaderService.prototype.loadViaWorker = function (url, headers) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var id, completeHandler, msgFn, errorFn;
                completeHandler = function (success, err) {
                    _this.worker.terminate(id);
                    if (success) {
                        _this.imageCache[url] = true;
                        resolve(true);
                    } else {
                        reject(err);
                    }
                };
                msgFn = function (e) {
                    if (e && e.data !== 'ERROR') {
                        completeHandler(true);
                    } else {
                        completeHandler(false, e);
                    }
                };
                errorFn = function (e) {
                    completeHandler(false, e);
                };
                var config = {
                    method: 'GET',
                    url: url
                };
                // optionally set headers
                if (headers) {
                    config.headers = headers;
                }
                id = _this.worker.load(config, msgFn, errorFn);
            });
        };
        /*
        * Loads the url via `Http` directly.
        * @param url  url of image to load.
        * @param headers  **(optional)** any custom headers (as an `Object`) that may be required to load the image.
        * @returns return `Promise`
        */
        ImageLazyLoaderService.prototype.loadViaHttp = function (url, headers) {
            var _this = this;
            var ro = null;
            if (headers) {
                ro = new http_1.RequestOptions({
                    headers: new http_1.Headers(headers)
                });
            }
            return new Promise(function (resolve, reject) {
                _this.http.get(url, ro).subscribe(function (res) {
                    _this.imageCache[url] = true;
                    resolve(true);
                });
            });
        };
        ImageLazyLoaderService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [http_1.Http, web_worker_service_1.WebWorkerService])], ImageLazyLoaderService);
        return ImageLazyLoaderService;
    }();
    exports.ImageLazyLoaderService = ImageLazyLoaderService;
    

    return module.exports;
});
System.registerDynamic('src/app/services/web-worker.service', ['@angular/core'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var WebWorkerService = function () {
        function WebWorkerService() {
            this.activeWorkers = [];
        }
        WebWorkerService.prototype.load = function (config, msgFn, errorFn) {
            if (typeof config !== 'object') {
                throw "config must be an Object with method and url defined.";
            } else if (!config.url) {
                throw "config.url must be defined.";
            }
            var id = Math.floor(Math.random() * 1000000000000);
            var w = new Worker(WebWorkerService.workerUrl);
            if (msgFn) {
                w.addEventListener('message', msgFn, false);
            }
            if (errorFn) {
                w.addEventListener('error', errorFn, false);
            }
            this.activeWorkers.push({
                id: id,
                worker: w,
                msgFn: msgFn,
                errorFn: errorFn
            });
            w.postMessage(config);
            return id;
        };
        WebWorkerService.prototype.terminate = function (id) {
            var index = this.activeWorkers.findIndex(function (item) {
                return item.id === id;
            });
            if (index > -1) {
                var activeWorker = this.activeWorkers[index];
                if (activeWorker && activeWorker.worker) {
                    if (activeWorker.worker.msgFn) {
                        activeWorker.worker.removeEventListener('message', activeWorker.worker.msgFn);
                    }
                    if (activeWorker.worker.errorFn) {
                        activeWorker.worker.removeEventListener('error', activeWorker.worker.errorFn);
                    }
                    activeWorker.worker.terminate();
                }
                this.activeWorkers.splice(index, 1);
            }
        };
        WebWorkerService.supported = typeof Worker !== 'undefined';
        WebWorkerService.workerUrl = 'assets/js/xhrWorker.js';
        WebWorkerService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [])], WebWorkerService);
        return WebWorkerService;
    }();
    exports.WebWorkerService = WebWorkerService;
    

    return module.exports;
});
System.registerDynamic("ng2-image-lazy-load", ["@angular/core", "./src/app/directives/image-lazy-load.directive", "./src/app/services/image-lazy-load.service", "./src/app/services/web-worker.service"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    var core_1 = $__require("@angular/core");
    var image_lazy_load_directive_1 = $__require("./src/app/directives/image-lazy-load.directive");
    var image_lazy_load_service_1 = $__require("./src/app/services/image-lazy-load.service");
    var web_worker_service_1 = $__require("./src/app/services/web-worker.service");
    // for manual imports
    __export($__require("./src/app/services/image-lazy-load.service"));
    __export($__require("./src/app/services/web-worker.service"));
    __export($__require("./src/app/directives/image-lazy-load.directive"));
    var ImageLazyLoadModule = function () {
        function ImageLazyLoadModule() {}
        ImageLazyLoadModule.forRoot = function (configuredProviders) {
            return {
                ngModule: ImageLazyLoadModule,
                providers: configuredProviders
            };
        };
        ImageLazyLoadModule = __decorate([core_1.NgModule({
            declarations: [image_lazy_load_directive_1.IMAGELAZYLOAD_DIRECTIVES],
            providers: [image_lazy_load_service_1.ImageLazyLoaderService, web_worker_service_1.WebWorkerService],
            exports: [image_lazy_load_directive_1.IMAGELAZYLOAD_DIRECTIVES]
        }), __metadata('design:paramtypes', [])], ImageLazyLoadModule);
        return ImageLazyLoadModule;
    }();
    exports.ImageLazyLoadModule = ImageLazyLoadModule;
    

    return module.exports;
});